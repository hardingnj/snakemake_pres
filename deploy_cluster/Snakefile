configfile: "config.yaml"
SAMPLES = config["samples"]

rule draw_tree:
    input:
        txt="output/results.dist"
    output:
        png="output/results.png"
    params:
        req="h_vmem=2G",
        samples=SAMPLES
    env:
        "conda.yaml"
    script:
        "scripts/draw_tree.py"


rule mash_dist:
    input:
        mash="output/results.msh"
    output:
        txt="output/results.dist"
    env:
        "conda.yaml"
    params:
        req="h_vmem=2G"
    shell:
        "mash dist -t {input.mash} {input.mash} > {output.txt}"


rule mash_paste:
    input:
        expand("output/{sample}_{treatment}.msh", sample=SAMPLES, treatment=["Rep1"])
    output:
        mash="output/results.msh"
    env:
        "conda.yaml"
    params:
        req="h_vmem=2G",
        mash="output/results"
    wildcard_constraints:
        sample="\D\d\D?",
        treatment="\D{3}\d"
    shell:
        "mash paste {params.mash} {input}"
        

rule mash_sketch:
    input:
        bam="../data/wgEncodeUwRepliSeqBg02es{sid}Aln{treatment}.bam",
        bai="../data/wgEncodeUwRepliSeqBg02es{sid}Aln{treatment}.bam.bai"
    output:
        mash="output/{sid}_{treatment}.msh"
    wildcard_constraints:
        sid="\D\d\D?",
        treatment="\D{3}\d"
    env:
        "conda.yaml"
    params:
        req="h_vmem=2G",
        mash="output/{sid}_{treatment}",
        k=21,
        m=2,
        g=1000000,
        s=1000
    shell:
        "samtools fasta {input.bam} | "
        "mash sketch -o {params.mash} "
        "-m {params.m} -k {params.k} -g {params.g} -s {params.s} -"

rule download:
    output:
        file="../data/{fname}"
    shell:
        "curl http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeUwRepliSeq/{wildcards.fname} > {output.file}"

rule cleardata:
    shell:
        "rm ../data/*"
